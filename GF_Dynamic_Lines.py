import re
import random

class GF_Node:
    @classmethod
    def INPUT_TYPES(s):
        return {"required": {
            "input_text": ("STRING", {"multiline": True, "default": s.EXAMPLE()}),
            "separators": ("STRING", {"default": ","}),
            "line_separator": ("STRING", {"default": ","}),
            "seed": ("INT", {"default": 0, "min": 0, "max": 0xffffffffffffffff}),
            "show_help": ("BOOLEAN", {"default": False}),
        }}

    RETURN_TYPES = ("STRING",)
    FUNCTION = "process"
    CATEGORY = "GF"

    @staticmethod
    def EXAMPLE():
        return """boy with a dog
apple,banana,orange
R:2
red,blue,green
R:0
girl with a cat
car,bicycle,scooter"""

    @staticmethod
    def HELP():
        return """This node allows you to dynamically create and process text lines with randomization options.

Example usage:
boy with a dog
apple,banana,orange
R:2
red,blue,green
R:0
girl with a cat
car,bicycle,scooter

1. By default, a random choice (R:0) is applied to all lines.
2. Any line without separators is always added to the result in full.
3. Lines with separators are processed according to the randomization settings.
4. To change the randomization setting for the next line, specify:
   - R:0 - selects a random word (default setting)
   - R:1 - selects the first word
   - R:N - selects the N-th word (if N is greater than the number of words, selects the last one)
5. The randomization setting applies only to the next line, then returns to R:0.
6. The line separator (default ",") is used to separate words in a line.
7. Separators (default ",") are used between selected words from different lines.

For more information, visit the repository: https://github.com/gorillaframeai/GF_Node

–≠—Ç–∞ –Ω–æ–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –æ–ø—Ü–∏—è–º–∏ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏.

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
–º–∞–ª—å—á–∏–∫ —Å —Å–æ–±–∞–∫–æ–π
—è–±–ª–æ–∫–æ,–±–∞–Ω–∞–Ω,–∞–ø–µ–ª—å—Å–∏–Ω
R:2
–∫—Ä–∞—Å–Ω—ã–π,—Å–∏–Ω–∏–π,–∑–µ–ª–µ–Ω—ã–π
R:0
–¥–µ–≤–æ—á–∫–∞ —Å –∫–æ—à–∫–æ–π
–º–∞—à–∏–Ω–∞,–≤–µ–ª–æ—Å–∏–ø–µ–¥,—Å–∞–º–æ–∫–∞—Ç

1. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä (R:0).
2. –õ—é–±–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ü–µ–ª–∏–∫–æ–º.
3. –°—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏.
4. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏, —É–∫–∞–∂–∏—Ç–µ:
   - R:0 - –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
   - R:1 - –≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
   - R:N - –≤—ã–±–∏—Ä–∞–µ—Ç N-–Ω–æ–µ —Å–ª–æ–≤–æ (–µ—Å–ª–∏ N –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤, –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ)
5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É, –ø–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ R:0.
6. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ç—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ",") –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ.
7. –°–µ–ø–∞—Ä–∞—Ç–æ—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ",") –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/gorillaframeai/GF_Node"""

    def process(self, input_text, separators, line_separator, seed, show_help):
        if show_help:
            return (self.HELP(),)

        lines = input_text.split('\n')
        outputs = []
        random_pattern = re.compile(r'R:(\d+)')
        random.seed(seed)

        random_setting = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é R:0

        for line in lines:
            line = line.strip()
            if not line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                continue

            random_match = random_pattern.match(line)

            if random_match:
                random_setting = int(random_match.group(1))
            else:
                self.process_line(line, random_setting, line_separator, outputs)
                random_setting = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏

        result = " ".join(outputs).strip()  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        return (result,)

    def process_line(self, line, random_setting, line_separator, outputs):
        if line_separator in line:
            elements = [elem.strip() for elem in line.split(line_separator) if elem.strip()]
            if elements:
                if random_setting == 0:
                    selected = random.choice(elements)
                elif random_setting > len(elements):
                    selected = elements[-1]
                else:
                    selected = elements[random_setting - 1]
                outputs.append(selected + " ")  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        else:
            outputs.append(line + " ")  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π —Ü–µ–ª–∏–∫–æ–º —Å –ø—Ä–æ–±–µ–ª–æ–º –≤ –∫–æ–Ω—Ü–µ

# –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ComfyUI
NODE_CLASS_MAPPINGS = {
    "GF_Node": GF_Node
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "GF_Node": "üêµ GF Node (Dynamic Lines)"
}
